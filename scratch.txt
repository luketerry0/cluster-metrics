    # get embedding values and cluster values
    # CLUSTER_SET = '4_level_skyline_5_cat'
    # BASE_PATH = "."
    # for LEVEL in range(config.n_levels):
    #     NUM_CLUSTERS = config.n_clusters[LEVEL]
    #     LEVEL += 1
    #     # keep track of clusters in current level
    #     curr_level_clusters = []
    #     clusters = np.load(f'{BASE_PATH}/{CLUSTER_SET}/level{LEVEL}/sorted_clusters.npy', allow_pickle=True)

    #     # get the centroids for the current level
    #     centroids = da.from_array(np.load(f'{BASE_PATH}/{CLUSTER_SET}/level{LEVEL}/centroids.npy'), chunks='auto')

    #     for CLUSTER in range(NUM_CLUSTERS):

    #         # get the current cluster in the initial level: corresponds to centroids in previous levels unless LEVEL == 1
    #         cluster_indices = clusters[CLUSTER]

    #         # convert these indices to actual embeddings
    #         og_level = LEVEL
    #         while LEVEL > 1:
    #             indices = np.array([])
    #             previous_level_clusters = np.load(f'{BASE_PATH}/{CLUSTER_SET}/level{LEVEL - 1}/sorted_clusters.npy', allow_pickle=True)
    #             for centroid_index in cluster_indices:
    #                 # grab the corresponding cluster in the previous level and flatten the indices
    #                 indices = np.concatenate((indices, previous_level_clusters[int(centroid_index)]))
    #             LEVEL -= 1
    #             cluster_indices = indices.astype(int)
    #         LEVEL = og_level
    #         curr_level_clusters.append([centroids[CLUSTER], cluster_indices])
        
    #     hierarchy.append({'clusters': curr_level_clusters, 'level': LEVEL})